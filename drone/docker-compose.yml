version: "3.8"
services:
  drone:
    image: drone/drone:2
    container_name: drone
    environment:
      - DRONE_GITHUB_CLIENT_ID
      - DRONE_GITHUB_CLIENT_SECRET
      - DRONE_RPC_SECRET
      - DRONE_SERVER_HOST
      - DRONE_SERVER_PROTO
      - DRONE_USER_FILTER
      - DRONE_USER_CREATE
      - DRONE_STARLARK_ENABLE=true
      - DRONE_JSONNET_ENABLED=true
    volumes:
      - /mnt/glusterfs/drone:/data
    restart: always
    expose:
      - 80
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.labels.master == true
      labels:
        - "traefik.enable=true"
        - "traefik.constraint-label=traefik-public"
        - "traefik.http.services.drone.loadbalancer.server.port=80"

  drone-runner:
    container_name: drone-runner
    image: drone/drone-runner-docker:1
    environment:
      - DRONE_RPC_PROTO
      - DRONE_RPC_HOST
      - DRONE_RPC_SECRET
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 3000:3000
    restart: always
    deploy:
      mode: global
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

networks:
  traefik-public:
    external: true
    driver: overlay
